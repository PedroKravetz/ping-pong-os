#include <signal.h>
#include <sys/time.h>

struct itimerval timer;
struct sigaction action;

void tratador (int signum){
    //print_task();
    systemTime++;
    taskExec->running_time++;
    taskExec->timeRemaining--;
    taskExec->quantum-=1;
    if (taskExec->quantum <= 0 && taskExec->flagUser){
        task_yield();
    }
}

void print_task(){
    printf("TaskExec ID: %d\n", taskExec->id);
    printf("TaskExec Time Remaining: %d\n", taskExec->timeRemaining);
    printf("TaskExec Execution Time: %d\n", taskExec->executionTime);
    printf("TaskExec Running Time: %d\n", taskExec->running_time);
    printf("TaskExec Flag User: %d\n", taskExec->flagUser);
    printf("TaskExec quantum: %d\n", taskExec->quantum);
    printf("TaskExec activations: %d\n\n", taskExec->activations);
}

void task_set_eet (task_t *task, int et){
    if (task == NULL)
        task = taskExec;
    (*task).executionTime = et;
    (*task).timeRemaining = et - (*task).timeRemaining;
}

int task_get_eet(task_t *task){
    if (task == NULL)
        task = taskExec;
    return (*task).executionTime;
}

int task_get_ret(task_t *task){
    if (task == NULL)
        task = taskExec;
    return (*task).timeRemaining;
}

void before_ppos_init () {
    // put your customization here
    action.sa_handler = tratador ;
    sigemptyset (&action.sa_mask) ;
    action.sa_flags = 0 ;
    if (sigaction (SIGALRM, &action, 0) < 0)
    {
        perror ("Erro em sigaction: ") ;
        exit (1) ;
    }
#ifdef DEBUG
    printf("\ninit - BEFORE");
#endif
}

void after_ppos_init () {
    // put your customization here
    printf("PPOS initialized successfully...\n");
    // ajusta valores do temporizador
    timer.it_value.tv_usec = 1000;      // primeiro disparo, em micro-segundos
    timer.it_value.tv_sec  = 0;      // primeiro disparo, em segundos
    timer.it_interval.tv_usec = 1000;   // disparos subsequentes, em micro-segundos
    timer.it_interval.tv_sec  = 0;   // disparos subsequentes, em segundos

    // arma o temporizador ITIMER_REAL (vide man setitimer)
    if (setitimer (ITIMER_REAL, &timer, 0) < 0)
    {
        perror ("Erro em setitimer: ") ;
        exit (1) ;
    }
    systemTime=0;
    taskDisp->flagUser = 0;
    taskMain->flagUser = 0;
    taskDisp->timeRemaining = 99999;
    taskMain->timeRemaining = 99999;
#ifdef DEBUG
    printf("\ninit - AFTER");
#endif
}

void after_task_create (task_t *task ) {
    // put your customization here
    (*task).running_time = 0;
    (*task).time_alive = systemTime;
    (*task).timeRemaining = 0;
    (*task).executionTime = 99999;
    (*task).flagUser = 1;
    (*task).quantum = 20;
    (*task).activations = 0;
#ifdef DEBUG
    printf("\ntask_create - AFTER - [%d]", task->id);
#endif
}

void before_task_exit () {
    // put your customization here
   printf("\nTask %d exit: execution time %u ms, processor time %u ms, %u activations\n", taskExec->id, (systemTime-taskExec->time_alive), taskExec->running_time, taskExec->activations);
#ifdef DEBUG
    printf("\ntask_exit - BEFORE - [%d]", taskExec->id);
#endif
}

void after_task_switch ( task_t *task ) {
    // put your customization here
    taskExec->activations++;
#ifdef DEBUG
    printf("\ntask_switch - AFTER - [%d -> %d]", taskExec->id, task->id);
#endif
    //printf("\ntask_switch - AFTER - [%d -> %d] Fila Prontos=%d", taskExec->id, task->id, queue_size(readyQueue));
}

task_t * scheduler() {
    // SRTF scheduler
    int min;
    int id;
    task_t * aux, *auxMin;
    if (readyQueue != NULL) {
        min = (readyQueue)->timeRemaining;
        id = (readyQueue)->id;
        aux = readyQueue;
        auxMin = aux;
        aux= aux->next;
        while ((*aux).id != id){
            if ((*aux).timeRemaining < min){
                min = (*aux).timeRemaining;
                auxMin = aux;
            }
            aux = (*aux).next;
        }
        auxMin->quantum=20;
        return auxMin;
    }
    
    return NULL;
}
